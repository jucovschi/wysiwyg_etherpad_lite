<?php
// $Id: wysiwyg_codemirror.module,v 1.1 2010/03/17 16:48:12 drifter Exp $
/**
 * @file
 * wysiwyg_codemirror is an plugin for adding syntax highlighting to the tinyMCE editor
 * Zoltan Varady/FARM 2010
 */

function wysiwyg_etherpad_lite_wysiwyg_include_directory($type) {
	switch ($type) {
		case 'editors':
		return $type;
	}
}

function wysiwyg_etherpad_lite_field_formatter_info() {
	return array('localedit' => array(
		'label'=>t('Local Editable'),
		'field types' => array('text', 'text_long', 'text_with_summary'),
	));
}

function etherpad_init() {
	require_once("etherpad-lite-client/etherpad-lite-client.php");
}

function etherpad_get_client() {
	return new EtherpadLiteClient(variable_get('etherpad_api_key'), variable_get('etherpad_base_url')."/api");
}

function wysiwyg_etherpad_lite_enrich_form(&$form, &$form_state) {
	try {
	etherpad_init();
	$client = etherpad_get_client();
	if ($client == null)
		return;
	
	if (isset($form["#node"]) && property_exists($form["#node"], "nid")) {
		$nid = $form["#node"]->nid;
		$egid = $client->createGroupIfNotExistsFor($nid)->groupID;
	} else
		$egid = $client->createGroup()->groupID;

	global $user;

	$author = $client->createAuthorIfNotExistsFor($user->uid, $user->name)->authorID;
	$validUntil = mktime(0, 0, 0, date("m"), date("d")+1, date("y")); // One day in the future

	$sessionID = $client->createSession($egid, $author, $validUntil)->sessionID;
	setcookie("sessionID", $sessionID, $validUntil, "/"); // Set a cookie
	
	$form["etherpad_gid"] = array(
				"#type" => "hidden",
				'#attributes' => array('id' => array('etherpad_gid')),
				"#default_value" => $egid,
	);
	if ($nid) {
		$form["etherpad_nid"] = array(
					"#type" => "hidden",
					'#attributes' => array('id' => array('etherpad_nid')),
					"#default_value" => $nid,
		);
	}
	} catch (Exception $e) {
		watchdog("error", $e);
	}
}

function wysiwyg_etherpad_lite_form_alter(&$form, &$form_state, $form_id) {
	if (isset($form["#entity_type"]) && $form["#entity_type"] == "node") {
		wysiwyg_etherpad_lite_enrich_form($form, $form_state);
	}
}

function wysiwyg_etherpad_lite_get_egid($nid) {
	$egid = db_select("etherpad_groups")->fields("etherpad_groups", array("egid"))->condition("nid", $nid)->execute()->fetchfield();
	return $egid;
}

function wysiwyg_etherpad_lite_node_presave($node) {
	if (property_exists($node, "etherpad_gid")) {
		$oldegid = wysiwyg_etherpad_lite_get_egid($node->nid);
		if (!isset($oldegid) || strlen($oldegid)==0) {
			db_insert("etherpad_groups")->fields(array('nid'=> $node->nid, 'egid' => $node->etherpad_gid))->execute();
		} else
		if ($oldegid != $node->etherpad_gid) {
			db_update("etherpad_groups")->fields(array('egid' => $node->etherpad_gid))->condition("nid",$node->nid)->execute();
		}
	}
}

function wysiwyg_etherpad_lite_setContent() {
	if (!isset($_POST["content"])) {
		echo json_encode(array("status"=>"fail", "msg" => "No content set"));
		return;
	}
	if (!isset($_POST["padid"])) {
		echo json_encode(array("status"=>"fail", "msg" => "No content set"));
		return;
	}
	$padid = $_POST["padid"];
	$content = $_POST["content"];
	try {
		etherpad_init();
		$client = etherpad_get_client();
		if ($client == null) {
			echo json_encode(array("status"=>"fail", "msg" => "could not initialize "));		
			return;
		}
		$client->setText($padid, $content);
	} catch (Exception $e) {
		echo json_encode(array("status"=>"fail", "msg" => "see logs"));
		watchdog("error", $e);
		return;
	}
	
	
	echo json_encode(array("status"=>"ok"));
}

function wysiwyg_etherpad_lite_menu() {
	$items['localedit/sync/%node'] = array(
		    'page callback' => 'wysiwyg_etherpad_lite_setContent',
		    'access arguments' => array('access administration pages'),
		    'type' => MENU_NORMAL_ITEM,
		    'access callback' => array('node_access'),
	    	'access arguments' => array('update', 2),
	);
	$items["admin/config/content/etherpad-lite"] = array (
		'title' => 'Etherpad-Lite configurations',
    	'description' => 'Default configuration to be used by all etherpad fields',
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('etherpad_config_form'),
    	'access arguments' => array('access administration pages'),
    	'type' => MENU_NORMAL_ITEM,
	);
	$items['localedit/%node/%'] = array(
	    'page callback' => 'drupal_get_form',
	    'page arguments' => array('local_edit_form'),
	    'access callback' => array('node_access'),
	    'access arguments' => array('update', 1),
	    'type' => MENU_NORMAL_ITEM,
	);
	return $items;
}

function etherpad_config_form($form, &$form_state) {
	$form["wel"] = array("#markup" => "<h2>Please adapt the Etherpad-lite configurations</h2>");
	$form["etherpad_base_url"] = array(
		"#type" => "textfield",
		"#title" => "Etherpad API URL",
    	'#default_value' =>   variable_get('etherpad_base_url' , 'http://localhost:9001/api'),
	);
	$form["etherpad_api_key"] = array(
			"#type" => "textfield",
			"#title" => "Etherpad API Key",
	    	'#default_value' =>   variable_get('etherpad_api_key' , 'kwarc_planetary'),
	);
	$form["test"] = array(
			"#type" => "button",
		    '#default_value' => "Test",
			'#ajax' => array(
	      		'callback' => 'etherpad_lite_test_connection',
	      		'wrapper' => 'result_div',
	),
	);
	$form['test_result'] = array(
	    '#prefix' => '<div id="result_div">',
	    '#suffix' => '</div>',
	);

	return system_settings_form($form);
}

function etherpad_lite_test_connection($form, $form_state) {
	etherpad_init();
	$values = $form_state["values"];
	$client = new EtherpadLiteClient($values["etherpad_api_key"], $values["etherpad_base_url"]."/api");
	$group = $client->createGroup();
	if ($group->groupID) {
		$form["test_result"]["#markup"] = "<h1 style='color:green'>Success!</h1>";
		$client->deleteGroup($group->groupID);
	}
	return $form["test_result"];
}

function local_edit_form($form, &$form_state) {
	$nid = arg(1); 
	$field = arg(2);
	$node = entity_load("node", array($nid));
	$node = $node[$nid];
	$form1 = array();
	field_attach_form("node", $node, $form1, $form_state);
	$form[$field] = $form1[$field];
	$form["#node"] = $node;
	$form["#field"] = $field;
	
	$form["submit"] = array(
		"#type"=>"submit", 
		"#value" => "Save",
		"#callback"=>array("local_edit_form_submit")
	);
	wysiwyg_etherpad_lite_enrich_form($form, $form_state);
	return $form;
}

function local_edit_form_submit($form, &$form_state) {
	$field = $form["#field"];
	$lang = $form["#node"]->language;
	$node = &$form["#node"];
	$fld = &$node->$field;
	dpm($fld);
	$fld[$lang]["0"]["value"]=$form_state["values"][$field][$lang]["0"]["value"];
	node_save($node);
}

function wysiwyg_etherpad_lite_theme($existing, $type, $theme, $path) {
	return array(
		"wysiwyg_etherpad_local" => array(
 			'render element' => 'element', 
      		'template' => 'wysiwyg_etherpad_local',		
      	)
	);
}

function wysiwyg_etherpad_lite_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$element = array();
	$update = node_access("update", entity);
	
	switch ($display['type']) {
		// This formatter simply outputs the field as text and with a color.
		case 'localedit':
			$display['type']="text_default";
			$elem = text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
			foreach ($items as $delta => $item) {
				if ($update) {
				$element[$delta]['#markup'] = theme("wysiwyg_etherpad_local", 
					array(
						"content" => $elem[$delta]["#markup"], 
						"link" => url('<front>')."localedit/".$entity->nid."/".$field["field_name"]));
				} else 
				{
					$element[$delta]['#markup'] = $elem[$delta]["#markup"];			
				}
			}
			break;
	}
	
	return $element;
}